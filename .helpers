# BUNDLER
alias be='bundle exec'
# Grep your bundled gems.
bundle_grep() {
  grep --color -n -r "$@" $(bundle list --paths)
}

alias bg='bundle_grep'

# GIF
# Converts a movie to an animated GIF w/ffmpeg. Useful for GH PRs.
convert_mov_to_gif() {
  full_filename=$@
  filename=$(basename -- "$full_filename")
  extension="${filename##*.}"
  filename="${filename%.*}" 
  ffmpeg -ss 00:00:00.000 -i $full_filename -r 10 -vf "scale=1280:-1" $filename.gif
}
alias mov2gif='convert_mov_to_gif'

#
# ENV
#
export GIT_PS1_SHOWDIRTYSTATE=1
export PATH=/usr/local/bin:$PATH
export EDITOR='vim'
export GIT_EDITOR=$EDITOR
export BUNDLE_EDITOR=subl

# Rails
alias rr='touch tmp/restart.txt'

# Docker
# dc overrides the builtin MacOS calculator program

alias dc='docker compose'

# Setup prompt
if [[ $SHELL == "/bin/bash" ]]; then
  export PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[01;33m\]$(__git_ps1)\[\033[01;34m\] \$\[\033[00m\] '
else
  autoload -U colors && colors
  autoload -Uz vcs_info
  precmd() { vcs_info }
  # %b - branch
  #zstyle ':vcs_info:git*' formats "%{$fg[grey]%}%s %{$reset_color%}%r/%S%{$fg[grey]%} %{$fg[blue]%}%b%{$reset_color%}%m%u%c%{$reset_color%} "
  zstyle ':vcs_info:git*' formats "%{$fg[blue]%}(%b)%{$reset_color%}%m%u%c%{$reset_color%}"

  # %m - machine hostname
  # %n - username
  setopt PROMPT_SUBST
  PROMPT='%{$fg[green]%}%n%{$reset_color%}%{$fg[blue]%}@%{$reset_color%}%{$fg[yellow]%}%~%{$reset_color%}${vcs_info_msg_0_}%b%{$fg[green]%}>%{$reset_color%} '
fi

# Fix keybindings for ZSH
if [[ $SHELL == "/bin/zsh" ]]; then
  bindkey "^A" vi-beginning-of-line
  bindkey "^E" vi-end-of-line
fi

# Docker compose helpers 
# alias drails="docker compose exec app rails $@"
# alias drake="docker compose exec app rake $@"
# TODO: why won't this work with all args, $@?
# alias dbg="docker compose exec app sh -c 'grep --color -n -r \"\$0\" `bundle list`'"

# Store a secret in the macOS Keychain, under "work" label
secret_set() {
  # Usage: secret_set SECRET_NAME SECRET_VALUE
  if [ $# -lt 2 ]; then
    echo "Usage: secret_set SECRET_NAME SECRET_VALUE"
    return 1
  fi
  security add-generic-password -a "$USER" -s "$1" -w "$2" -U -l work
}

# Retrieve a secret from the macOS Keychain with the "work" label
secret_get() {
  if [ $# -lt 1 ]; then
    echo "Usage: aws_secret_get SECRET_NAME"
    return 1
  fi
  security find-generic-password -a "$USER" -s "$1" -w
}

# List all secrets with "work" label
secret_list() {
  echo "Listing all generic passwords with 'work' label for user $USER:"
  security find-generic-password -a "$USER" -l "work" | awk -F'=' '/svce/ { print $2 }'
}
